import telebot
from telebot import apihelper
from telebot import types
import requests, json, re, os


token = os.getenv('token')

bot = telebot.TeleBot(token)
#apihelper.proxy = proxy

chat_id = {}

@bot.message_handler(commands=['start'])
def start(message):
    chat_id[message.chat.id]={}
    keyboard = types.InlineKeyboardMarkup()
    npm_button = types.InlineKeyboardButton(text='–ø–∞–∫–µ—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ JavaScript', callback_data='npm')
    maven_button = types.InlineKeyboardButton(text='–ø–∞–∫–µ—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ JAVA', callback_data='maven')
    pypi_button = types.InlineKeyboardButton(text='–ø–∞–∫–µ—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Python', callback_data='pypi')
    go_button = types.InlineKeyboardButton(text='–ø–∞–∫–µ—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ GO lang', callback_data='go')
    keyboard.add(npm_button)
    keyboard.add(maven_button)
    keyboard.add(pypi_button)
    keyboard.add(go_button)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', reply_markup=keyboard)



@bot.message_handler(content_types=['text'])
def show_message(message):
    print("–≤–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç: "+ str(message.text)+" –∏–∑ —á–∞—Ç–∞ "+str(message.chat.id))
    bot.send_message(message.chat.id, "—Ç–æ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –Ω–∏ –∫ –∫–∞–∫–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–∫–∏ –≤—ã—à–µ –∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∑–∞—Ç—å –≤–µ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
 

# Inline keyboard
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global chat_id
    if call.data == 'npm' or call.data == 'maven' or call.data == 'pypi' or call.data == 'go':
        markup = types.ReplyKeyboardMarkup()
        msg = bot.reply_to(call.message, '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ '+call.data)
        if call.data == 'maven':
            bot.send_message(call.message.chat.id, "–î–ª—è JAVA-–ø–∞–∫–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç - <group ID>:<artifact ID>, –Ω–∞–ø—Ä–∏–º–µ—Ä, org.apache.logging.log4j:log4j-core")
        if call.data == 'go':
            bot.send_message(call.message.chat.id, "–î–ª—è go-–ø–∞–∫–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ –ø–∞–∫–µ—Ç–∞ , –Ω–∞–ø—Ä–∏–º–µ—Ä, github.com/botwayorg/git –∏–ª–∏ go.etcd.io/etcd/client/pkg/v3")

        print("–≤—ã–±—Ä–∞–Ω –ø–∞–∫–µ—Ç: "+ call.data+" –∏–∑ —á–∞—Ç–∞ "+str(call.message.chat.id))
        bot.edit_message_reply_markup(call.message.chat.id,call.message.id, "",reply_markup=[])

        chat_id[call.message.chat.id]={}
        chat_id[call.message.chat.id]={"type_packet":str(call.data)}
        bot.register_next_step_handler(msg, send_package_name)

    if call.data == "know_version":
        msg2 = bot.reply_to(call.message, '—É–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ –ø–∞–∫–µ—Ç–∞')
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω —É–∫–∞–∑–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ –ø–∞–∫–µ—Ç–∞: "+ str(call.message.text)+" –∏–∑ —á–∞—Ç–∞ "+str(call.message.chat.id))
        bot.register_next_step_handler(msg2, send_package_version)



    if call.data == "dont_know_version":
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ—Ä—Å–∏–∏, –∑–∞–ø—Ä–æ—Å –∏–∑ —á–∞—Ç–∞ "+str(call.message.chat.id))
        bot.send_message(call.message.chat.id, "–≤—Å–µ –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–∞ "+chat_id[call.message.chat.id]['packet']+":")
        bot.send_message(call.message.chat.id, show_versions(call.message))

    if call.data == "without_dos":
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–∫–∞–∂–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑ DOS , –∑–∞–ø—Ä–æ—Å –∏–∑ —á–∞—Ç–∞ "+str(call.message.chat.id))
        bot.send_message(call.message.chat.id, show_vulns(get_full_packet_vulns(chat_id[call.message.chat.id]['type_packet'],chat_id[call.message.chat.id]['packet'],chat_id[call.message.chat.id]['version_of_packet'],True)))


    if call.data == "dont_know_version_show_vulns":
        bot.send_message(call.message.chat.id, "–≤—Å–µ –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–∞ c —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞–ª–∏—á–∏—è –≤—ã—Å–æ–∫–∏—Ö –∏–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π "+chat_id[call.message.chat.id]['packet']+":")


        bot.send_message(call.message.chat.id, show_versions_with_vulns(call.message))


    if call.data == "got_clean_version":
        got_clean_version(call.message)

def show_versions_with_vulns(message):
    global chat_id
    if 'version_with_vulns_task' in chat_id[message.chat.id]:
        if chat_id[message.chat.id]['version_with_vulns_task']:
            bot.send_message(message.chat.id, "–£–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π –ø–∞–∫–µ—Ç–∞, –æ–Ω–∞ –¥–æ–≤–æ–ª—å–Ω–æ —Ç—Ä—É–¥–æ—ë–º–∫–∞—è")
            bot.send_message(message.chat.id, "–ø–æ—ç—Ç–æ–º—É –¥–æ–∂–¥–∏—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–∞—Å–∫–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
    else:
        chat_id[message.chat.id]['version_with_vulns_task'] = True
        versions = show_versions(message).split('\n')
        versions.pop()
        result = ""
        result_dos_high = ""
        result_dos_critical = ""
        print(versions)
        for ver in versions:
            if ver == " ":
                print("pass")
                pass
            print(ver)
            temp_result= "—Å DOS: "
            result_dos = show_vulns(get_full_packet_vulns(chat_id[message.chat.id]['type_packet'],chat_id[message.chat.id]['packet'],ver,False))
            policy_dos_high = re.search(r"—É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: high", result_dos, re.IGNORECASE)
            if policy_dos_high:
                result_dos_high = "üü† "
            policy_dos_critical = re.search(r"—É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: critical", result_dos, re.IGNORECASE)
            if policy_dos_critical:
                result_dos_critical ="üî¥ "

            temp_result+=result_dos_critical+result_dos_high
            if not re.search(r"(üü†|üî¥)", result, re.IGNORECASE):
                temp_result+="üü¢ "

            temp_result2= "–±–µ–∑ DOS: "

            result_no_dos = show_vulns(get_full_packet_vulns(chat_id[message.chat.id]['type_packet'],chat_id[message.chat.id]['packet'],ver,True))
            result_no_dos_critical =""
            result_no_dos_high = ""

            if re.search(r"—É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: high", result_no_dos, re.IGNORECASE):
                result_no_dos_high = "üü† "
            if re.search(r"—É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: critical", result_no_dos, re.IGNORECASE):
                result_no_dos_critical ="üî¥ "

            temp_result2+=result_no_dos_critical+result_no_dos_high
            if not re.search(r"(üü†|üî¥)", result, re.IGNORECASE):
                temp_result2+="üü¢ "

            result+=ver+" "+temp_result+temp_result2+"\n"
        chat_id[message.chat.id]['version_with_vulns_task'] = False
        return result

def got_clean_version(message):
    global chat_id
    if 'clean_version_task' in chat_id[message.chat.id]:
        if chat_id[message.chat.id]['clean_version_task']:
            bot.send_message(message.chat.id, "–£–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –≤–µ—Ä—Å–∏–∏, –æ–Ω–∞ –¥–æ–≤–æ–ª—å–Ω–æ —Ç—Ä—É–¥–æ—ë–º–∫–∞—è")
            bot.send_message(message.chat.id, "–ø–æ—ç—Ç–æ–º—É –¥–æ–∂–¥–∏—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–∞—Å–∫–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
    else:
        chat_id[message.chat.id]['clean_version_task'] = True
        count = 0
        my_version_number = 0
        best_version_dos = ""
        best_version_no_dos = ""
        for i in chat_id[message.chat.id]['versions']:
            if i['versionKey']['version'] == chat_id[message.chat.id]['version_of_packet']:
                my_version_number = count
            count +=1
        
        if my_version_number == count:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å —Å–∞–º–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞")
        
        else:
            for i in range(my_version_number+1,count):
                result_dos = show_vulns(get_full_packet_vulns(chat_id[message.chat.id]['type_packet'],chat_id[message.chat.id]['packet'],str(chat_id[message.chat.id]['versions'][i]['versionKey']['version']),False))
                policy_dos = re.search(r"—É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: (high|critical)", result_dos, re.IGNORECASE)
                    
                if not policy_dos:
                    if best_version_dos == "":
                        best_version_dos = str(chat_id[message.chat.id]['versions'][i]['versionKey']['version'])
            
                result_without_dos = show_vulns(get_full_packet_vulns(chat_id[message.chat.id]['type_packet'],chat_id[message.chat.id]['packet'],str(chat_id[message.chat.id]['versions'][i]['versionKey']['version']),True))    
                policy_without_dos = re.search(r"—É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: (high|critical)", result_without_dos, re.IGNORECASE)
                
                if not policy_without_dos:
                    if best_version_no_dos == "":
                        best_version_no_dos = str(chat_id[message.chat.id]['versions'][i]['versionKey']['version'])

            bot.send_message(message.chat.id, "–ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –¥–ª—è –≤–µ—Ä—Å–∏–∏ —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–µ —Ä–∞–Ω–µ–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–º–∏")
            
            if (best_version_dos == ""):
                bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–µ—Ä—Å–∏–∏ –±–µ–∑ –≤—ã—Å–æ–∫–∏—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (—Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏, –ø—Ä–∏–≤–æ–¥—è—â–∏–º –∫ DOS)")
            else:
                bot.send_message(message.chat.id, "–ü–æ–¥—Ö–æ–¥—è—â—è—è –≤–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞ "+str(chat_id[message.chat.id]['packet'])+" –±–µ–∑ –≤—ã—Å–æ–∫–∏—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (—Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏, –ø—Ä–∏–≤–æ–¥—è—â–∏–º –∫ DOS) - "+best_version_dos)
            

            if (best_version_no_dos == ""):
                bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–µ—Ä—Å–∏–∏ –±–µ–∑ –≤—ã—Å–æ–∫–∏—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (–Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –ø—Ä–∏–≤–æ–¥—è—â–∏–µ –∫ DOS)")
            else:
                bot.send_message(message.chat.id, "–ü–æ–¥—Ö–æ–¥—è—â—è—è –≤–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞ "+str(chat_id[message.chat.id]['packet'])+" –±–µ–∑ –≤—ã—Å–æ–∫–∏—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (–Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –ø—Ä–∏–≤–æ–¥—è—â–∏–µ –∫ DOS) - "+best_version_no_dos)
        chat_id[message.chat.id]['clean_version_task'] = False

def show_versions(message):
    versions = ""
    for i in chat_id[message.chat.id]['versions']:
        versions += i['versionKey']['version']+"\n"
    return versions

def send_package_name(message):
    if message.text == "/start":
        #return False
        start(message)
        return False
    global chat_id
    if message.chat.id in chat_id:
        url = 'https://api.deps.dev/v3alpha/systems/'+chat_id[message.chat.id]['type_packet']+'/packages/'+str(message.text).lower()

        print("–ø–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–∞–∫–µ—Ç–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π "+url+", –∑–∞–ø—Ä–æ—Å –∏–∑ —á–∞—Ç–∞ "+str(message.chat.id))

        resp = requests.get(url)
        #print(resp.text)
        if(resp.status_code == 404):
            bot.send_message(message.chat.id, "–ü–∞–∫–µ—Ç "+str(message.text).lower()+" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ "+chat_id[message.chat.id]['type_packet'])
            print("–ü–∞–∫–µ—Ç "+str(message.text).lower()+" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ "+chat_id[message.chat.id]['type_packet']+", –∑–∞–ø—Ä–æ—Å –∏–∑ —á–∞—Ç–∞ "+str(message.chat.id))
        else:
            resp_parse = json.loads(resp.text)
            tmp_dict = {"packet":str(message.text).lower(),"versions":resp_parse['versions']}
            chat_id[message.chat.id].update(tmp_dict)
            bot.send_message(message.chat.id, '–ü–∞–∫–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏')

            print("–ü–∞–∫–µ—Ç "+str(message.text).lower()+"–Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ , –∑–∞–ø—Ä–æ—Å –∏–∑ —á–∞—Ç–∞ "+str(message.chat.id))

            keyboard = types.InlineKeyboardMarkup()
            known_button = types.InlineKeyboardButton(text='–ó–Ω–∞—é –≤–µ—Ä—Å–∏—é –ø–∞–∫–µ—Ç–∞', callback_data='know_version')
            stupid_button = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∂–∏ –≤—Å–µ –≤–µ—Ä—Å–∏–∏', callback_data='dont_know_version')
            #not_so_stupid_button = types.InlineKeyboardButton(text='–ù–µ –∑–Ω–∞—é –≤–µ—Ä—Å–∏—é –ø–∞–∫–µ—Ç–∞, –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –µ—Å—Ç—å c –ø–æ–¥–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ–º, —É—è–≤–∑–∏–º–∞ –ª–∏ –≤–µ—Ä—Å–∏—è', callback_data='dont_know_version_show_vulns')
            keyboard.add(known_button)
            keyboard.add(stupid_button)
            #keyboard.add(not_so_stupid_button)
            bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ –ø–∞–∫–µ—Ç–∞',reply_markup=keyboard)
       
def send_package_version(message):
    if message.text == "/start":
        #return False
        start(message)
        return False
    
    if message.chat.id in chat_id:
        if 'packet' in chat_id[message.chat.id]:
            url = 'https://api.deps.dev/v3alpha/systems/'+chat_id[message.chat.id]['type_packet']+'/packages/'+chat_id[message.chat.id]['packet']+'/versions/'+str(message.text)
    
            resp = requests.get(url)
    
            if (resp.status_code == 404):
                bot.send_message(message.chat.id, "–í–µ—Ä—Å–∏—è "+str(message.text)+" –ø–∞–∫–µ—Ç–∞ "+ str(chat_id[message.chat.id]['packet'])+" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ "+str(chat_id[message.chat.id]['type_packet'])) 
                print("–í–µ—Ä—Å–∏—è "+str(message.text)+" –ø–∞–∫–µ—Ç–∞ "+ str(chat_id[message.chat.id]['packet'])+" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ "+str(chat_id[message.chat.id]['type_packet'])+", –∑–∞–ø—Ä–æ—Å –∏–∑ —á–∞—Ç–∞ "+str(message.chat.id))
                return False
            else:
                tmp_dict = {"version_of_packet":str(message.text).lower()}
                chat_id[message.chat.id].update(tmp_dict)
                result = show_vulns(get_full_packet_vulns(chat_id[message.chat.id]['type_packet'],chat_id[message.chat.id]['packet'],str(message.text),False)) 
                bot.send_message(message.chat.id, result)
        
        
                keyboard = types.InlineKeyboardMarkup()
                without_dos = types.InlineKeyboardButton(text='–Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å DoS', callback_data='without_dos')
                got_clean_version = types.InlineKeyboardButton(text='–ü–æ–¥–æ–±—Ä–∞—Ç—å –≤–µ—Ä—Å–∏—é –±–µ–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π', callback_data='got_clean_version')
                keyboard.add(without_dos)
                keyboard.add(got_clean_version)
                bot.send_message(message.chat.id, '–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?',reply_markup=keyboard)

                return result

def show_vulns(dict):
    direct_flag = True
    indirect_flag = True
    exist_direct = False
    exist_indirect = False
    direct_has_vuln = False
    indirect_has_vuln = False
    self_has_vuln = False

    self_exist_vuln = False
    direct_exist_vuln = False
    indirect_exist_vuln = False

    #print(dict)

    for i in dict:
        if dict[i]['relation']=="DIRECT":
            exist_direct = True
        if dict[i]['relation'] == "INDIRECT":
            exist_indirect = True
    result_string = ""
    for i in dict:
        flag_policy = False            
        
        if dict[i]['vulns'] != "no vuln's":
            if dict[i]['relation'] == "SELF": 
                
                result_string+='–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —Å–∞–º–æ–º –ø–∞–∫–µ—Ç–µ:\n\n'
            #bot.send_message(message.from_user.id, '–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —Å–∞–º–æ–º –ø–∞–∫–µ—Ç–µ:', reply_markup=markup)

                self_exist_vuln = True
                for j in dict[i]['vulns']:
                    vulns = dict[i]['vulns'][j]
                    
                    if str(vulns['severity'])=="high":
                        self_has_vuln = True
                        result_string+="üü† "+dict[i]['name']+' - '+dict[i]['version'] +" CVSS —Å–∫–æ—Ä–∏–Ω–≥: "+str(vulns['CVSS —Å–∫–æ—Ä–∏–Ω–≥'])+", CVE: "+str(vulns['CVE'])+", –û–ø–∏—Å–∞–Ω–∏–µ: "+str(vulns['–û–ø–∏—Å–∞–Ω–∏–µ'])+", —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: "+str(vulns['severity'])+"\n"
                    elif str(vulns['severity'])=="critical":
                        self_has_vuln = True
                        result_string+="üî¥ "+dict[i]['name']+' - '+dict[i]['version'] +" CVSS —Å–∫–æ—Ä–∏–Ω–≥: "+str(vulns['CVSS —Å–∫–æ—Ä–∏–Ω–≥'])+", CVE: "+str(vulns['CVE'])+", –û–ø–∏—Å–∞–Ω–∏–µ: "+str(vulns['–û–ø–∏—Å–∞–Ω–∏–µ'])+", —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: "+str(vulns['severity'])+"\n"
                         
            if dict[i]['relation'] == "DIRECT":
                #print(dict[i]['name'])
                if (exist_direct and direct_flag):
                    result_string+="\n–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –ø—Ä—è–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö:\n\n"
                    #bot.send_message(message.from_user.id, '–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –ø—Ä—è–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö:', reply_markup=markup)
                direct_flag = False
            
                for j in dict[i]['vulns']:
                    vulns = dict[i]['vulns'][j]
                    
                    #if str(vulns['severity'])=="high" or str(vulns['severity'])=="critical":       
                    if str(vulns['severity'])=="high": 
                        direct_has_vuln = True
                        result_string+="üü† –ü–∞–∫–µ—Ç "+dict[i]['name']+' - '+dict[i]['version'] +" CVSS —Å–∫–æ—Ä–∏–Ω–≥: "+str(vulns['CVSS —Å–∫–æ—Ä–∏–Ω–≥'])+", CVE: "+str(vulns['CVE'])+", –û–ø–∏—Å–∞–Ω–∏–µ: "+str(vulns['–û–ø–∏—Å–∞–Ω–∏–µ'])+", —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: "+str(vulns['severity'])+"\n"
                        #bot.send_message(message.from_user.id, "–ü–∞–∫–µ—Ç "+dict[i]['name']+' - '+dict[i]['version'] +" CVSS —Å–∫–æ—Ä–∏–Ω–≥: "+str(vulns['CVSS —Å–∫–æ—Ä–∏–Ω–≥'])+", CVE: "+str(vulns['CVE'])+", –û–ø–∏—Å–∞–Ω–∏–µ: "+str(vulns['–û–ø–∏—Å–∞–Ω–∏–µ'])+", —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: "+str(vulns['severity']))
                    if str(vulns['severity'])=="critical": 
                        direct_has_vuln = True
                        result_string+="üî¥ –ü–∞–∫–µ—Ç "+dict[i]['name']+' - '+dict[i]['version'] +" CVSS —Å–∫–æ—Ä–∏–Ω–≥: "+str(vulns['CVSS —Å–∫–æ—Ä–∏–Ω–≥'])+", CVE: "+str(vulns['CVE'])+", –û–ø–∏—Å–∞–Ω–∏–µ: "+str(vulns['–û–ø–∏—Å–∞–Ω–∏–µ'])+", —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: "+str(vulns['severity'])+"\n"
                        #bot.send_message(message.from_user.id, "–ü–∞–∫–µ—Ç "+dict[i]['name']+' - '+dict[i]['version'] +" CVSS —Å–∫–æ—Ä–∏–Ω–≥: "+str(vulns['CVSS —Å–∫–æ—Ä–∏–Ω–≥'])+", CVE: "+str(vulns['CVE'])+", –û–ø–∏—Å–∞–Ω–∏–µ: "+str(vulns['–û–ø–∏—Å–∞–Ω–∏–µ'])+", —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: "+str(vulns['severity']))
            
            
            if dict[i]['relation'] == "INDIRECT":
                if (exist_indirect and indirect_flag):
                    result_string+='\n–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö:\n\n'
                    #bot.send_message(message.from_user.id, '–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö:', reply_markup=markup)
                indirect_flag = False
            
                for j in dict[i]['vulns']:
                    vulns = dict[i]['vulns'][j]
                    
                    if str(vulns['severity'])=="high":       
                        indirect_has_vuln = True
                        result_string+="üü† –ü–∞–∫–µ—Ç "+dict[i]['name']+' - '+dict[i]['version']+" CVSS —Å–∫–æ—Ä–∏–Ω–≥: "+str(vulns['CVSS —Å–∫–æ—Ä–∏–Ω–≥'])+", CVE: "+str(vulns['CVE'])+", –û–ø–∏—Å–∞–Ω–∏–µ: "+str(vulns['–û–ø–∏—Å–∞–Ω–∏–µ'])+", —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: "+str(vulns['severity'])+"\n"
                        #bot.send_message(message.from_user.id, "–ü–∞–∫–µ—Ç "+dict[i]['name']+' - '+dict[i]['version']+" CVSS —Å–∫–æ—Ä–∏–Ω–≥: "+str(vulns['CVSS —Å–∫–æ—Ä–∏–Ω–≥'])+", CVE: "+str(vulns['CVE'])+", –û–ø–∏—Å–∞–Ω–∏–µ: "+str(vulns['–û–ø–∏—Å–∞–Ω–∏–µ'])+", —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: "+str(vulns['severity']))
                    if str(vulns['severity'])=="critical":       
                        indirect_has_vuln = True
                        result_string+="üî¥ –ü–∞–∫–µ—Ç "+dict[i]['name']+' - '+dict[i]['version']+" CVSS —Å–∫–æ—Ä–∏–Ω–≥: "+str(vulns['CVSS —Å–∫–æ—Ä–∏–Ω–≥'])+", CVE: "+str(vulns['CVE'])+", –û–ø–∏—Å–∞–Ω–∏–µ: "+str(vulns['–û–ø–∏—Å–∞–Ω–∏–µ'])+", —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: "+str(vulns['severity'])+"\n"
                        #bot.send_message(message.from_user.id, "–ü–∞–∫–µ—Ç "+dict[i]['name']+' - '+dict[i]['version']+" CVSS —Å–∫–æ—Ä–∏–Ω–≥: "+str(vulns['CVSS —Å–∫–æ—Ä–∏–Ω–≥'])+", CVE: "+str(vulns['CVE'])+", –û–ø–∏—Å–∞–Ω–∏–µ: "+str(vulns['–û–ø–∏—Å–∞–Ω–∏–µ'])+", —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: "+str(vulns['severity']))
        

        
        else:
                if dict[i]['relation'] == "SELF":
                    if not self_exist_vuln:
                        result_string+='üü° –í —Å–∞–º–æ–º –ø–∞–∫–µ—Ç–µ '+dict[i]['name']+' - '+dict[i]['version'] +' –Ω–µ—Ç –≤—ã—Å–æ–∫–∏—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π\n'
                        #bot.send_message(message.from_user.id, 'üü¢ –í —Å–∞–º–æ–º –ø–∞–∫–µ—Ç–µ '+dict[i]['name']+' - '+dict[i]['version'] +' –Ω–µ—Ç –≤—ã—Å–æ–∫–∏—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π',reply_markup=markup)
                    else: 
                        result_string+='üü¢ –í —Å–∞–º–æ–º –ø–∞–∫–µ—Ç–µ '+dict[i]['name']+' - '+dict[i]['version'] +' –≤–æ–æ–±—â–µ –Ω–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π\n'
                        #bot.send_message(message.from_user.id, 'üü¢ –í —Å–∞–º–æ–º –ø–∞–∫–µ—Ç–µ '+dict[i]['name']+' - '+dict[i]['version'] +' –≤–æ–æ–±—â–µ –Ω–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π',reply_markup=markup)

                if dict[i]['relation'] == "DIRECT":
                    if (exist_direct and direct_flag):
                        result_string+='\n–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –ø—Ä—è–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö:\n\n'
                        #bot.send_message(message.from_user.id, '–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –ø—Ä—è–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö:', reply_markup=markup)
                        direct_flag = False
                    if not direct_has_vuln:
                        result_string+='üü° –ü–∞–∫–µ—Ç '+dict[i]['name']+' - '+dict[i]['version'] +' –Ω–µ –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π\n'
                        #bot.send_message(message.from_user.id, 'üü¢ –ü–∞–∫–µ—Ç '+dict[i]['name']+' - '+dict[i]['version'] +' –Ω–µ –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π',reply_markup=markup)
               
                if dict[i]['relation'] == "INDIRECT" :
                    
                    if (exist_indirect and indirect_flag):
                        result_string+='\n–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö:\n\n'
                        #bot.send_message(message.from_user.id, '–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö:', reply_markup=markup)
                        indirect_flag = False 

                    if direct_has_vuln:
                        result_string+='üü¢ –ü–∞–∫–µ—Ç '+dict[i]['name']+' - '+dict[i]['version'] +' –≤–æ–æ–±—â–µ –Ω–µ –∏–º–µ–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π\n'
                        #bot.send_message(message.from_user.id, 'üü¢ –ü–∞–∫–µ—Ç '+dict[i]['name']+' - '+dict[i]['version'] +' –≤–æ–æ–±—â–µ –Ω–µ –∏–º–µ–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π',reply_markup=markup)
    #print(result_string)
    return result_string

def get_full_packet_vulns(packet_type, packet, packet_version,dos):
    result = {}
    deps = get_depencies(packet_type, packet, packet_version)
    for i in deps:
        vulns = get_self_packet_vulns(deps[i]['type'],deps[i]['name'],deps[i]['version'],dos)
        result[i]={"name":deps[i]['name'],"version":deps[i]['version'],"relation":deps[i]['relation'],"vulns":vulns}
    sorted_result = sort_vulns(result)
    #print(sorted_result)
    return sorted_result



def get_depencies(packet_type, packet, packet_version):
    dict = {}
    url = 'https://api.deps.dev/v3alpha/systems/'+packet_type+'/packages/'+packet+'/versions/'+packet_version+':dependencies'
    resp = requests.get(url)
    if resp.status_code == 200:
        resp_parse = json.loads(resp.text)
        count = 0
        for i in resp_parse['nodes']:
            dict[count]={"type":packet_type,"name":i['versionKey']['name'],"version":i['versionKey']['version'],"relation":i['relation']}
            count+=1
        return dict
    else:
        return False



def get_advisories(dict):
    if dict['advisoryKeys']:
        advisories = []
        for i in dict['advisoryKeys']:
            url = 'https://api.deps.dev/v3alpha/advisories/'+i['id']
            resp = requests.get(url)
            
            if(resp.status_code == 200):
                resp_parse = json.loads(resp.text)
                advisories.append(resp_parse)
        return advisories
    else:
        return "no vuln's"


def sort_vulns(dict):
    count =0
    return_dict = {}
    for i in dict:
        if dict[i]['relation'] == "SELF":
            return_dict[i]= dict[i]
            count+=1        
    for i in dict:
        if dict[i]['relation'] == "DIRECT":
            return_dict[i]= dict[i]
            count+=1
    for i in dict:
        if dict[i]['relation'] == "INDIRECT":
            return_dict[i]= dict[i]
            count+=1
    return return_dict


def get_self_packet_vulns(packet_type, packet, packet_version, dos):
    url = 'https://api.deps.dev/v3alpha/systems/'+packet_type+'/packages/'+packet+'/versions/'+packet_version
    resp = requests.get(url)

    if resp.status_code == 200:
        resp_parse = json.loads(resp.text)
        vulns_in_packet = get_advisories(resp_parse)
        if vulns_in_packet == "no vuln's":
            return "no vuln's"
        else:
            count = 0
            dict = {}
            #print(vulns_in_packet)
            for i in vulns_in_packet:
                #print(i)
                #if str(i['cvss3score']) == 0:
                #     dict[count]={"CVSS —Å–∫–æ—Ä–∏–Ω–≥: "+str(i['cvss2Score'])+", CVE: "+str(i['aliases'])+", –û–ø–∏—Å–∞–Ω–∏–µ: "+str(i['title'])}
                # else:
                x = re.search(r"(DoS|denial of service)", str(i['title']), re.IGNORECASE)
                str4dict = {}
                if x:
                    #dict[count]={"CVSS —Å–∫–æ—Ä–∏–Ω–≥":str(i['cvss3Score']),"CVE":str(i['aliases']),"–û–ø–∏—Å–∞–Ω–∏–µ":str(i['title']),"dos":"yes"}
                    if not dos:
                        str4dict = {"CVSS —Å–∫–æ—Ä–∏–Ω–≥":str(i['cvss3Score']),"CVE":str(i['aliases']),"–û–ø–∏—Å–∞–Ω–∏–µ":str(i['title']),"dos":"yes"}
                else:
                    str4dict={"CVSS —Å–∫–æ—Ä–∏–Ω–≥":str(i['cvss3Score']),"CVE":str(i['aliases']),"–û–ø–∏—Å–∞–Ω–∏–µ":str(i['title']),"dos":"no"}
                score = float(i['cvss3Score'])
                if x and dos:
                    pass
                else:
                    if score >= 7.0 and score < 8.5:
                        str4dict.update({'severity':'high'})
                    elif score >= 8.5:
                        str4dict.update({'severity':'critical'})
                    elif score >= 5.5 and score < 7.0:
                        str4dict.update({'severity':'medium'})
                    else:
                        str4dict.update({'severity':'low'})
                    dict[count]=str4dict            

                count+=1
            #print(dict)
            return dict


bot.polling(none_stop=True, interval=0) 
