import telebot
from telebot import types
import requests,json

bot = telebot.TeleBot('')

chat_id = {}
markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
@bot.message_handler(commands=['start'])
def start(message):

   
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (python, java, go, npm)")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∫–∞ –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –¥–∞–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è", reply_markup=markup)


@bot.message_handler(commands=['check_package'])
def check_package(message):
      
    if message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (python, java, go, npm)':
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('npm')
        btn2 = types.KeyboardButton('maven')
        btn3 = types.KeyboardButton('pypi')
        btn4 = types.KeyboardButton('go')
        markup.add(btn1, btn2, btn3,btn4)
        bot.send_message(message.from_user.id, '–≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        if message.chat.id in chat_id: del chat_id[message.chat.id]

@bot.message_handler(content_types=['text'])
def get_text_messages(message):

  
    global chat_id, markup    
    if message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (python, java, go, npm)':
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('npm')
        btn2 = types.KeyboardButton('maven')
        btn3 = types.KeyboardButton('pypi')
        btn4 = types.KeyboardButton('go')
        markup.add(btn1, btn2, btn3,btn4)
        bot.send_message(message.from_user.id, '–≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        if message.chat.id in chat_id: del chat_id[message.chat.id]
    elif message.chat.id in chat_id:
        print("in elif in 33 line")
        print(chat_id)
        print("going to run get_version")
        
        if 'packet' in chat_id[message.chat.id]:
            if 'packet_version' in chat_id[message.chat.id]:
                check_version(message)
                
        else:
            get_version(message)
    elif message.text == 'npm' or message.text == 'pypi' or message.text == 'maven' or message.text == 'go':
        if message.chat.id in chat_id: del chat_id[message.chat.id]
        
        markup = types.ForceReply(selective=False)
        
        chat_id[message.chat.id] = {"type_packet":message.text}
        print(chat_id[message.chat.id]['type_packet'])
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞', reply_markup=markup)
  
    else:
        markup = types.ForceReply(selective=False)
        bot.send_message(message.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –ø–∞–∫–µ—Ç',reply_markup=markup)


def get_version(message):
    global chat_id, markup
    url = 'https://api.deps.dev/v3alpha/systems/'+str(chat_id[message.chat.id]['type_packet'])+'/packages/'+str(message.text).lower()
    print("func get_version, try to curl "+url)
    resp = requests.get(url)
    print(resp.text)
    if(resp.status_code == 404):
        bot.send_message(message.from_user.id, "–ü–∞–∫–µ—Ç "+str(message.text).lower()+" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ "+str(chat_id[message.chat.id]['type_packet']), reply_markup=markup)   
    else:
        tmp_dict = {"packet":str(message.text).lower()}
        chat_id[message.chat.id].update(tmp_dict)
        bot.send_message(message.from_user.id, '–ü–∞–∫–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏', reply_markup=markup)
        bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ –ø–∞–∫–µ—Ç–∞', reply_markup=markup)
        tmp_dict = {"packet_version":"yes"}
        chat_id[message.chat.id].update(tmp_dict)

def check_version(message):
    url = 'https://api.deps.dev/v3alpha/systems/'+str(chat_id[message.chat.id]['type_packet'])+'/packages/'+str(chat_id[message.chat.id]['packet'])+'/versions/'+message.text
    print("func check_version, try to curl "+url)
    resp = requests.get(url)
    print(resp.text)

    if (resp.status_code == 404):
        bot.send_message(message.from_user.id, "–í–µ—Ä—Å–∏—è "+message.text+" –ø–∞–∫–µ—Ç–∞ "+ str(chat_id[message.chat.id]['packet'])+" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ "+str(chat_id[message.chat.id]['type_packet']), reply_markup=markup) 
    else:

        resp_parse = json.loads(resp.text)
        
        adv = get_advisories(resp_parse)
        if adv == "no vuln's":
            bot.send_message(message.from_user.id, '–í —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–∞–∫–µ—Ç–µ –Ω–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π!',reply_markup=markup)
        else:
            bot.send_message(message.from_user.id, '–í —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–∞–∫–µ—Ç–µ –µ—Å—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏...')
            #print(advisories[0])
            for i in adv:
                bot.send_message(message.from_user.id, "CVSS —Å–∫–æ—Ä–∏–Ω–≥: "+str(i['cvss3Score'])+", CVE: "+str(i['aliases'])+", –û–ø–∏—Å–∞–Ω–∏–µ: "+str(i['title']))
            markup2 = types.ReplyKeyboardMarkup(resize_keyboard=False)
            btn1 = types.KeyboardButton('DoS-–Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω')
            btn2 = types.KeyboardButton('–ü–æ–¥–æ–±—Ä–∞—Ç—å –≤–µ—Ä—Å–∏—é –±–µ–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (DoS –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω)')
            btn3 = types.KeyboardButton('–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç –±–µ–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (DoS –∫—Ä–∏—Ç–∏—á–µ–Ω)')
            markup2.add(btn1, btn2, btn3)
            bot.send_message(message.from_user.id, '–æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É', reply_markup=markup2)

def get_advisories(dict):
    print(dict['advisoryKeys'])
    if dict['advisoryKeys']:
        advisories = []
        for i in dict['advisoryKeys']:
            url = 'https://api.deps.dev/v3alpha/advisories/'+i['id']
            resp = requests.get(url)
            resp_parse = json.loads(resp.text)
            advisories.append(resp_parse)
        return advisories
    else:
        return "no vuln's"



bot.polling(none_stop=True, interval=0) 
